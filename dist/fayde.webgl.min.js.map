{"version":3,"sources":["_version.ts","fayde.webgl.js","WebGLCanvas.ts","WebGLDrawEventArgs.ts","WebGLInitEventArgs.ts","WebGLSourceBase.ts","WebGLSource.ts","shader/ShaderBase.ts","shader/FragmentShader.ts","shader/VertexShader.ts","shader/conversion.ts","Updater/WebGLCanvasUpdater.ts","Updater/arrange/WebGLCanvasArrangePipeDef.ts","Updater/measure/WebGLCanvasMeasurePipeDef.ts","Updater/render/WebGLCanvasRenderPipeDef.ts","Updater/arrange/tapins/buildLayoutClip.ts","Updater/arrange/tapins/doOverride.ts","Updater/measure/tapins/doOverride.ts","Updater/render/tapins/doRender.ts"],"names":["Fayde","Fayde.WebGL","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","Fayde.WebGL.WebGLCanvas","Fayde.WebGL.WebGLCanvas.constructor","Fayde.WebGL.WebGLCanvas.CreateLayoutUpdater","Fayde.WebGL.WebGLCanvas.OnSourceChanged","Fayde.WebGL.WebGLCanvas.OnInit","Fayde.WebGL.WebGLCanvas.OnDraw","Fayde.WebGL.reactions","Fayde.WebGL.WebGLDrawEventArgs","Fayde.WebGL.WebGLDrawEventArgs.constructor","Fayde.WebGL.WebGLInitEventArgs","Fayde.WebGL.WebGLInitEventArgs.constructor","Fayde.WebGL.WebGLSourceBase","Fayde.WebGL.WebGLSourceBase.constructor","Fayde.WebGL.WebGLSourceBase.$setElement","Fayde.WebGL.WebGLSourceBase.$tryLoad","Fayde.WebGL.WebGLSourceBase.resize","Fayde.WebGL.WebGLSourceBase.init","Fayde.WebGL.WebGLSourceBase.draw","Fayde.WebGL.WebGLSourceBase.detach","Fayde.WebGL.WebGLSourceBase.attach","Fayde.WebGL.WebGLSource","Fayde.WebGL.WebGLSource.constructor","Fayde.WebGL.WebGLSource.OnVertexShaderChanged","Fayde.WebGL.WebGLSource.OnFragmentShaderChanged","Fayde.WebGL.WebGLSource.$tryLoad","Fayde.WebGL.WebGLSource.init","Fayde.WebGL.LoadStatus","Fayde.WebGL.ShaderBase","Fayde.WebGL.ShaderBase.constructor","Fayde.WebGL.ShaderBase.OnSourceChanged","Fayde.WebGL.ShaderBase.OnUriChanged","Fayde.WebGL.ShaderBase.load","Fayde.WebGL.ShaderBase.compile","Fayde.WebGL.ShaderBase.use","Fayde.WebGL.ShaderBase.getType","Fayde.WebGL.FragmentShader","Fayde.WebGL.FragmentShader.constructor","Fayde.WebGL.FragmentShader.getType","Fayde.WebGL.VertexShader","Fayde.WebGL.VertexShader.constructor","Fayde.WebGL.VertexShader.getType","Fayde.WebGL.fillShader","fayde","fayde.webgl","fayde.webgl.updater","fayde.webgl.updater.WebGLCanvasUpdater","fayde.webgl.updater.WebGLCanvasUpdater.constructor","fayde.webgl.updater.WebGLCanvasUpdater.init","fayde.webgl.updater.WebGLCanvasUpdater.onSurfaceChanged","fayde.webgl.updater.WebGLCanvasUpdater.preRender","fayde.webgl.updater.WebGLCanvasUpdater.onSizeChanged","fayde.webgl.updater.arrange","fayde.webgl.updater.arrange.WebGLCanvasArrangePipeDef","fayde.webgl.updater.arrange.WebGLCanvasArrangePipeDef.constructor","fayde.webgl.updater.measure","fayde.webgl.updater.measure.WebGLCanvasMeasurePipeDef","fayde.webgl.updater.measure.WebGLCanvasMeasurePipeDef.constructor","fayde.webgl.updater.render","fayde.webgl.updater.render.WebGLCanvasRenderPipeDef","fayde.webgl.updater.render.WebGLCanvasRenderPipeDef.constructor","fayde.webgl.updater.arrange.tapins","fayde.webgl.updater.arrange.tapins.buildLayoutClip","fayde.webgl.updater.arrange.tapins.doOverride","fayde.webgl.updater.measure.tapins","fayde.webgl.updater.measure.tapins.doOverride","fayde.webgl.updater.render.tapins","fayde.webgl.updater.render.tapins.doRender"],"mappings":"AAAA,GAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GACEC,EAAAA,QAAUA,SADZD,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCOP,IAAIE,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,KCV5EN,OAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GACTC,GAAAA,GAAAA,SAAAA,GAWIY,QAAAA,KACIC,EAAAA,KAAAA,MAJJA,KAAAA,KAAOA,GAAIA,WAAUA,MACrBA,KAAAA,KAAOA,GAAIA,WAAUA,MAIjBA,KAAKA,gBAAkBA,EAmB/BD,MAhCiCA,WAAAA,EAAAA,GAC7BA,EAAAA,UAAAA,oBAAAA,WACIE,MAAOA,IAAIA,OAAMA,MAAMA,QAAQA,oBAczBF,EAAAA,UAAAA,gBAAVA,SAA0BA,EAA8BA,GAAxDG,GAAAA,GAAAA,IACQA,IACAA,EAAUA,SACVA,GACAA,EAAUA,OAAOA,SAACA,EAAIA,GAAYA,MAAAA,GAAKA,OAAOA,EAAIA,IAC9CA,SAACA,EAAIA,EAASA,EAAOA,GAAWA,MAAAA,GAAKA,OAAOA,EAAIA,EAASA,EAAOA,MAIlEH,EAAAA,UAAAA,OAAVA,SAAiBA,EAA2BA,GACxCI,KAAKA,KAAKA,MAAMA,KAAMA,GAAIA,GAAAA,mBAAmBA,EAAIA,KAG3CJ,EAAAA,UAAAA,OAAVA,SAAiBA,EAA2BA,EAAuBA,EAAeA,GAC9EK,KAAKA,KAAKA,MAAMA,KAAMA,GAAIA,GAAMA,mBAAmBA,EAAIA,EAASA,EAAOA,KAzBpEL,EAAAA,eAAiBA,mBAAmBA,SAASA,SAAUA,WAAMA,MAAAA,GAAMA,aAAaA,EAAaA,OAAWA,SAACA,EAAgBA,GAASA,MAAAA,GAAEA,gBAAgBA,EAAKA,SAAUA,EAAKA,YA2BnLA,GAhCiCZ,EAAAA,iBAApBA,GAAAA,YAAWA,EAiCxBA,EAAMA,YAAYA,IAAIA,GACtBA,EAAMA,OAAOA,QAAQA,EAAaA,EAAYA,eAE9CA,IAAOA,IAAPA,SAAOA,GACHkB,EAAAA,WAAWA,EAAYA,eAAgBA,SAACA,EAAKA,EAAIA,EAAIA,GAC3CA,EAAIA,gBAAgBA,EAAIA,KAC/BA,IAHAlB,IAAAA,QArCED,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GACTC,GAAAA,GAAAA,WAMImB,QAAAA,GAAYA,EAA2BA,EAAuBA,EAAeA,GACzEC,OAAOA,iBAAiBA,MACpBA,IAAOA,MAAOA,EAAIA,UAAUA,GAC5BA,SAAYA,MAAOA,EAASA,UAAUA,GACtCA,OAAUA,MAAOA,EAAOA,UAAUA,GAClCA,QAAWA,MAAOA,EAAQA,UAAUA,KAGhDD,MAAAA,KAdanB,GAAAA,mBAAkBA,GADtBD,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GACTC,GAAAA,GAAAA,WAIIqB,QAAAA,GAAYA,EAA2BA,GACnCC,OAAOA,iBAAiBA,MACpBA,IAAOA,MAAOA,EAAIA,UAAUA,GAC5BA,SAAYA,MAAOA,EAASA,UAAUA,KAGlDD,MAAAA,KAVarB,GAAAA,mBAAkBA,GADtBD,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAQTC,GAAAA,GAAAA,SAAAA,GAOIuB,QAAAA,KACIC,EAAAA,KAAAA,MALMA,KAAAA,SAAUA,EAMhBA,KAAKA,YAAYA,SAASA,cAAcA,WACxCA,KAAKA,WA4CbD,MAtDqCA,WAAAA,EAAAA,GAazBA,EAAAA,UAAAA,YAARA,SAAoBA,GAChBE,KAAKA,IAA8BA,EAAQA,WAAWA,UAAYA,EAAQA,WAAWA,sBACrFA,KAAKA,YAGCF,EAAAA,UAAAA,SAAVA,WACUG,KAAKA,UAEXA,KAAKA,KAAKA,KAAKA,IAAKA,KAAKA,SAAWA,KAAKA,IAAIA,iBAC7CA,KAAKA,SAAUA,IAGnBH,EAAAA,UAAAA,OAAAA,SAAOA,EAAeA,GAClBI,GAAIA,GAASA,KAAKA,IAAIA,MACtBA,MAAKA,IAAIA,SAASA,EAAGA,EAAGA,EAAOA,GAC/BA,EAAOA,MAAQA,EACfA,EAAOA,OAASA,GAGpBJ,EAAAA,UAAAA,KAAAA,SAAKA,EAA2BA,GAC5BK,KAAKA,SAAWA,KAAKA,QAAQA,EAAIA,IAGrCL,EAAAA,UAAAA,KAAAA,SAAKA,GACDM,GAAKA,KAAKA,QAAVA,CAGAA,GAAIA,GAASA,KAAKA,IAAIA,MACtBA,MAAKA,SAAWA,KAAKA,QAAQA,KAAKA,IAAKA,KAAKA,SAAUA,EAAOA,MAAOA,EAAOA,QAC3EA,EAAIA,UAAUA,EAAQA,EAAGA,KAG7BN,EAAAA,UAAAA,OAAAA,WACIO,KAAKA,QAAUA,KACfA,KAAKA,QAAUA,MAGnBP,EAAAA,UAAAA,OAAAA,SAAOA,EAAoBA,GACvBQ,KAAKA,QAAUA,EACfA,KAAKA,QAAUA,GAEvBR,GAtDqCvB,EAAAA,iBAAxBA,GAAAA,gBAAeA,GARnBD,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCEP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GACTC,GAAAA,GAAAA,SAAAA,GAAAgC,QAAAA,KAAiCC,EAAAA,MAAAA,KAAAA,WAmDjCD,MAnDiCA,WAAAA,EAAAA,GAMnBA,EAAAA,UAAAA,sBAAVA,SAAgCA,EAAyBA,GAAzDE,GAAAA,GAAAA,IACQA,IACAA,EAAUA,OACLA,KAAKA,WAAMA,MAAAA,GAAKA,YACbA,SAAAA,GAAOA,MAAAA,SAAQA,MAAMA,gCAAiCA,MAI5DF,EAAAA,UAAAA,wBAAVA,SAAkCA,EAA2BA,GAA7DG,GAAAA,GAAAA,IACQA,IACAA,EAAUA,OACLA,KAAKA,WAAMA,MAAAA,GAAKA,YACbA,SAAAA,GAAOA,MAAAA,SAAQA,MAAMA,kCAAmCA,MAI9DH,EAAAA,UAAAA,SAAVA,WACII,IAAMA,KAAKA,QAAXA,CAEAA,GAAIA,GAAKA,KAAKA,aACVA,EAAKA,KAAKA,cACTA,IAAOA,GAAOA,EAAGA,UAAaA,EAAGA,WAEtCA,KAAKA,KAAKA,KAAKA,IAAKA,KAAKA,SAAWA,KAAKA,IAAIA,iBAC7CA,KAAKA,SAAUA,KAGnBJ,EAAAA,UAAAA,KAAAA,SAAKA,EAA2BA,GAC5BK,GAAIA,GAAKA,KAAKA,YACdA,GAAGA,QAAQA,GACXA,EAAGA,IAAIA,EAAIA,EAEXA,IAAIA,GAAKA,KAAKA,cAKdA,OAJAA,GAAGA,QAAQA,GACXA,EAAGA,IAAIA,EAAIA,GAEXA,EAAGA,YAAYA,GACVA,EAAGA,oBAAoBA,EAASA,EAAGA,cAIxCA,EAAGA,WAAWA,QACdA,KAAKA,SAAWA,KAAKA,QAAQA,KAAKA,IAAKA,KAAKA,gBAJxCA,SAAQA,KAAKA,gCAAiCA,EAAGA,kBAAkBA,KA3CpEL,EAAAA,qBAAuBA,mBAAmBA,SAASA,eAAgBA,WAAMA,MAAAA,GAAAA,cAAcA,EAAaA,OAAWA,SAACA,EAAgBA,GAASA,MAAAA,GAAEA,sBAAsBA,EAAKA,SAAUA,EAAKA,YACrLA,EAAAA,uBAAyBA,mBAAmBA,SAASA,iBAAkBA,WAAMA,MAAAA,GAAAA,gBAAgBA,EAAaA,OAAWA,SAACA,EAAgBA,GAASA,MAAAA,GAAEA,wBAAwBA,EAAKA,SAAUA,EAAKA,YAiDxMA,GAnDiChC,EAAAA,gBAApBA,GAAAA,YAAWA,GADfD,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCFP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAETC,GAAKA,IAALA,SAAKA,GACDsC,EAAAA,EAAAA,UAAAA,GAAAA,YACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,WAAAA,GAAAA,aACAA,EAAAA,EAAAA,QAAAA,GAAAA,WAJCtC,IAAAA,MAOLA,IAAAA,GAAAA,SAAAA,GAAAuC,QAAAA,KAAgCC,EAAAA,MAAAA,KAAAA,WAQlBA,KAAAA,QAAuBA,KACzBA,KAAAA,YAAcA,EAAWA,UACzBA,KAAAA,SAAWA,KACXA,KAAAA,WAAYA,EAyExBD,MApFgCA,WAAAA,EAAAA,GAalBA,EAAAA,UAAAA,gBAAVA,SAA0BA,EAAmBA,GACzCE,KAAKA,WAAYA,EACbA,KAAKA,cAAgBA,EAAWA,SAChCA,KAAKA,gBAAgBA,EAAWA,YAAaA,QAE5CA,GAIDA,KAAKA,YAAcA,EAAWA,OAC9BA,KAAKA,gBAAgBA,EAAWA,kBAAkBA,KAJlDA,KAAKA,YAAcA,EAAWA,UAC9BA,KAAKA,gBAAgBA,EAAWA,kBAAkBA,KAOhDF,EAAAA,UAAAA,aAAVA,SAAuBA,EAAaA,GAChCG,KAAKA,WAAYA,EACZA,GAELA,KAAKA,gBAAgBA,EAAWA,eAAgBA,SAGpDH,EAAAA,UAAAA,KAAAA,SAAKA,GAALI,GAAAA,GAAAA,IAIIA,IAHIA,KAAcA,GACdA,KAAKA,gBAAgBA,EAAWA,eAAgBA,QAEhDA,KAAKA,cAAgBA,EAAWA,OAChCA,MAAOA,SAAQA,QAAQA,KAC3BA,IAAIA,KAAKA,cAAgBA,EAAWA,WAChCA,MAAOA,SAAQA,OAAgBA,KAAKA,SAExCA,IAAIA,GAAMA,KAAKA,GACfA,OAAIA,GAAAA,IAAIA,cAAcA,GACXA,QAAQA,OAAgBA,+CAEnCA,KAAKA,YAAcA,EAAWA,QAC9BA,KAAKA,SAAWA,KACTA,GAAIA,SAAiBA,SAACA,EAASA,GAC5BA,SAAUA,QAAUA,EAAKA,KAAMA,SAACA,GAClCA,EAAKA,gBAAgBA,EAAWA,eAAgBA,GAChDA,EAAQA,IACTA,SAACA,GACAA,EAAKA,YAAcA,EAAWA,WAC9BA,EAAOA,EAAKA,SAAWA,SAKnCJ,EAAAA,UAAAA,QAAAA,SAAQA,GACJK,GAAMA,KAAKA,UACPA,OAAOA,CACXA,IAAIA,GAAMA,KAAKA,MACfA,KAAKA,EACDA,OAAOA,CACXA,IAAIA,GAASA,KAAKA,QAAUA,EAAGA,aAAaA,KAAKA,QAAQA,GAGzDA,IAFAA,EAAGA,aAAaA,EAAQA,GACxBA,EAAGA,cAAcA,IACZA,EAAGA,mBAAmBA,EAAQA,EAAGA,gBAElCA,KADAA,SAAQA,MAAMA,2CAA4CA,EAAGA,iBAAiBA,IACxEA,GAAIA,OAAMA,2CAGpBA,OADAA,MAAKA,WAAYA,GACVA,GAGXL,EAAAA,UAAAA,IAAAA,SAAIA,EAA2BA,GAC3BM,EAAGA,aAAaA,EAASA,KAAKA,UAGxBN,EAAAA,UAAAA,QAAVA,SAAkBA,GACdO,MAAOA,IAjFJP,EAAAA,eAAiBA,mBAAmBA,SAASA,SAAUA,WAAMA,MAAAA,SAAQA,EAAYA,OAAWA,SAACA,EAAeA,GAASA,MAAAA,GAAEA,gBAAgBA,EAAKA,SAAUA,EAAKA,YAC3JA,EAAAA,YAAcA,mBAAmBA,SAASA,MAAOA,WAAMA,MAAAA,GAAAA,KAAKA,EAAYA,OAAWA,SAACA,EAAeA,GAASA,MAAAA,GAAEA,aAAaA,EAAKA,SAAUA,EAAKA,YAC/IA,EAAAA,iBAAmBA,mBAAmBA,SAASA,WAAYA,WAAMA,MAAAA,UAASA,GAAYA,GAiFjGA,GApFgCvC,EAAAA,iBAAnBA,GAAAA,WAAUA,EAqFvBA,EAAMA,OAAOA,QAAQA,EAAYA,EAAWA,iBA9FnCD,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCEP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GACTC,GAAAA,GAAAA,SAAAA,GAAA+C,QAAAA,KAAoCC,EAAAA,MAAAA,KAAAA,WAIpCD,MAJoCA,WAAAA,EAAAA,GACtBA,EAAAA,UAAAA,QAAVA,SAAkBA,GACdE,MAAOA,GAAGA,iBAElBF,GAJoC/C,EAAAA,WAAvBA,GAAAA,eAAcA,GADlBD,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GACTC,GAAAA,GAAAA,SAAAA,GAAAkD,QAAAA,KAAkCC,EAAAA,MAAAA,KAAAA,WAIlCD,MAJkCA,WAAAA,EAAAA,GACpBA,EAAAA,UAAAA,QAAVA,SAAkBA,GACdE,MAAOA,GAAGA,eAElBF,GAJkClD,EAAAA,WAArBA,GAAAA,aAAYA,GADhBD,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCCP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAsBTC,QAAAA,GAAoBA,EAAoBA,GAChCqD,YAAiBA,GAAAA,WACjBA,EAAOA,OAASA,EAAMA,OACfA,YAAiBA,GAAAA,IACxBA,EAAOA,IAAMA,EACWA,gBAAVA,KACdA,EAAOA,IAAMA,GAAIA,GAAAA,IAAIA,IA3B7BrD,UAAUA,sBAAsBA,EAAAA,eAAgBA,SAACA,GAC7CA,IAAKA,EACDA,MAAOA,EACXA,IAAIA,YAAiBA,GAAAA,eACjBA,MAAOA,EACXA,IAAIA,GAASA,GAAIA,GAAAA,cAEjBA,OADAA,GAAWA,EAAQA,GACZA,IAEXA,UAAUA,sBAAsBA,EAAAA,aAAcA,SAACA,GAC3CA,IAAKA,EACDA,MAAOA,EACXA,IAAIA,YAAiBA,GAAAA,aACjBA,MAAOA,EACXA,IAAIA,GAASA,GAAIA,GAAAA,YAEjBA,OADAA,GAAWA,EAAQA,GACZA,KAjBFD,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCHP,IAAOuD,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAAMC,GAAAA,IAAAA,SAAAA,GAKfC,GAAAA,GAAAA,SAAAA,GAAAC,QAAAA,KAAwCC,EAAAA,MAAAA,KAAAA,WAmCxCD,MAnCwCA,WAAAA,EAAAA,GAGpCA,EAAAA,UAAAA,KAAAA,WACIE,KAAKA,eAAeA,QAAQA,UAAUA,EAAAA,QAAQA,4BACzCA,eAAeA,QAAQA,UAAUA,EAAAA,QAAQA,4BACzCA,mBAAmBA,QAAQA,UAAUA,QAAQA,SAASA,OAAOA,YAAYA,2BACzEA,iBAAiBA,QAAQA,UAAUA,QAAQA,SAASA,OAAOA,UAAUA,yBACrEA,cAAcA,QAAQA,UAAUA,EAAAA,OAAOA,0BAE5CA,IAAIA,GAASA,KAAKA,MAClBA,GAAOA,OAASA,KAEhBA,EAAAA,UAAMA,KAAIA,KAAAA,OAGdF,EAAAA,UAAAA,iBAAAA,SAAiBA,EAAmCA,GAC5CG,GACAA,EAAWA,gBAAgBA,MAC3BA,GACAA,EAAWA,cAAcA,OAGjCH,EAAAA,UAAAA,UAAAA,WACII,GAAIA,GAASA,KAAKA,MACdA,GAAOA,QACPA,KAAKA,cAGbJ,EAAAA,UAAAA,cAAAA,SAAcA,EAAeA,GACzBK,EAAAA,UAAMA,cAAaA,KAAAA,KAACA,EAASA,EAC7BA,IAAIA,GAASA,KAAKA,OAAOA,MACrBA,IACAA,EAAOA,OAAOA,EAAQA,MAAOA,EAAQA,SAEjDL,GAnCwCD,QAAQA,KAAKA,QAAxCA,GAAAA,mBAAkBA,GALhBD,EAAAA,EAAAA,UAAAA,EAAAA,cAAND,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAAMC,GAAAA,IAAAA,SAAAA,GAAQC,GAAAA,IAAAA,SAAAA,GAOvBO,GAAAA,GAAAA,SAAAA,GACIC,QAAAA,KACIC,EAAAA,KAAAA,MACAA,KAAKA,aAAaA,aAAcA,EAAAA,OAAOA,YAClCA,aAAaA,kBAAmBA,EAAAA,OAAOA,iBAEpDD,MAN+CA,WAAAA,EAAAA,GAM/CA,GAN+CD,QAAQA,KAAKA,QAAQA,eAAvDA,GAAAA,0BAAyBA,GAPfP,EAAAA,EAAAA,UAAAA,EAAAA,cAARD,EAAAA,EAAAA,UAAAA,EAAAA,cAAND,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAAMC,GAAAA,IAAAA,SAAAA,GAAQC,GAAAA,IAAAA,SAAAA,GAQvBU,GAAAA,GAAAA,SAAAA,GACIC,QAAAA,KACIC,EAAAA,KAAAA,MACAA,KAAKA,aAAaA,aAAcA,EAAAA,OAAOA,YAE/CD,MAL+CA,WAAAA,EAAAA,GAK/CA,GAL+CD,QAAQA,KAAKA,QAAQA,eAAvDA,GAAAA,0BAAyBA,GARfV,EAAAA,EAAAA,UAAAA,EAAAA,cAARD,EAAAA,EAAAA,UAAAA,EAAAA,cAAND,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAAMC,GAAAA,IAAAA,SAAAA,GAAQC,GAAAA,IAAAA,SAAAA,GAKvBa,GAAAA,GAAAA,SAAAA,GACIC,QAAAA,KACIC,EAAAA,KAAAA,MACAA,KAAKA,aAAaA,WAAYA,EAAAA,OAAOA,UAE7CD,MAL8CA,WAAAA,EAAAA,GAK9CA,GAL8CD,QAAQA,KAAKA,OAAOA,cAArDA,GAAAA,yBAAwBA,GALdb,EAAAA,EAAAA,SAAAA,EAAAA,aAARD,EAAAA,EAAAA,UAAAA,EAAAA,cAAND,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAAMC,GAAAA,IAAAA,SAAAA,GAAQC,GAAAA,IAAAA,SAAAA,GAAQO,GAAAA,IAAAA,SAAAA,GAC/BS,QAAAA,GAAiCA,EAAeA,EAAeA,EAAiBA,EAAiCA,GAC7GC,GAAIA,GAAKA,EAAOA,UAEhBA,OADAA,GAAGA,EAAIA,EAAGA,EAAIA,EAAGA,MAAQA,EAAGA,OAASA,GAC9BA,EAHKD,EAAAA,gBAAeA,GADAT,EAAAA,EAAAA,SAAAA,EAAAA,aAARP,EAAAA,EAAAA,UAAAA,EAAAA,cAARD,EAAAA,EAAAA,UAAAA,EAAAA,cAAND,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAAMC,GAAAA,IAAAA,SAAAA,GAAQC,GAAAA,IAAAA,SAAAA,GAAQO,GAAAA,IAAAA,SAAAA,GAC/BS,QAAAA,GAA4BA,EAAeA,EAAeA,EAAiBA,EAAiCA,GAC/FE,EAAMA,SAEfA,OADAA,MAAKA,OAAOA,EAAMA,UAAWA,EAAMA,eAC5BA,EAHKF,EAAAA,WAAUA,GADKT,EAAAA,EAAAA,SAAAA,EAAAA,aAARP,EAAAA,EAAAA,UAAAA,EAAAA,cAARD,EAAAA,EAAAA,UAAAA,EAAAA,cAAND,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAAMC,GAAAA,IAAAA,SAAAA,GAAQC,GAAAA,IAAAA,SAAAA,GAAQU,GAAAA,IAAAA,SAAAA,GAC/BS,QAAAA,GAA2BA,EAAeA,EAAeA,EAAiBA,EAAiCA,GACvGC,GACIA,IADYA,EAAMA,cACRA,EAAOA,YAErBA,OADAA,GAAQA,MAAQA,EAAQA,OAASA,GAC1BA,EAJKD,EAAAA,WAAUA,GADKT,EAAAA,EAAAA,SAAAA,EAAAA,aAARV,EAAAA,EAAAA,UAAAA,EAAAA,cAARD,EAAAA,EAAAA,UAAAA,EAAAA,cAAND,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA,UCAP,IAAOA,QAAP,SAAOA,GAAMA,GAAAA,IAAAA,SAAAA,GAAMC,GAAAA,IAAAA,SAAAA,GAAQC,GAAAA,IAAAA,SAAAA,GAAOa,GAAAA,IAAAA,SAAAA,GAC9BQ,QAAAA,GAAyBA,EAAeA,EAAmCA,EAAqCA,EAAwCA,EAAcA,GAClKC,GAAIA,GAASA,EAAMA,MACnBA,OAAKA,IAGLA,EAAIA,OACJA,QAAQA,KAAKA,QAAQA,iBAAiBA,EAAKA,EAAOA,GAClDA,EAAOA,KAAKA,EAAIA,KAChBA,EAAIA,WAEGA,IAPIA,EAHCD,EAAAA,SAAQA,GADMR,EAAAA,EAAAA,SAAAA,EAAAA,aAAPb,EAAAA,EAAAA,SAAAA,EAAAA,aAARD,EAAAA,EAAAA,UAAAA,EAAAA,cAAND,EAAAA,EAAAA,QAAAA,EAAAA,YAANA,QAAAA","file":"fayde.webgl.min.js","sourcesContent":["module Fayde.WebGL {\r\n    export var version = '0.1.1';\r\n}",null,"module Fayde.WebGL {\n    export class WebGLCanvas extends FrameworkElement {\n        CreateLayoutUpdater() {\n            return new fayde.webgl.updater.WebGLCanvasUpdater();\n        }\n\n        static SourceProperty = DependencyProperty.Register(\"Source\", () => WebGL.WebGLSource, WebGLCanvas, undefined, (d: WebGLCanvas, args) => d.OnSourceChanged(args.OldValue, args.NewValue));\n        Source: WebGL.WebGLSource;\n\n        Init = new nullstone.Event<WebGLInitEventArgs>();\n        Draw = new nullstone.Event<WebGLDrawEventArgs>();\n\n        constructor() {\n            super();\n            this.DefaultStyleKey = WebGLCanvas;\n        }\n\n        protected OnSourceChanged(oldSource: WebGL.WebGLSource, newSource: WebGL.WebGLSource) {\n            if (oldSource)\n                oldSource.detach();\n            if (newSource) {\n                newSource.attach((gl, program) => this.OnInit(gl, program),\n                    (gl, program, width, height) => this.OnDraw(gl, program, width, height));\n            }\n        }\n\n        protected OnInit(gl: WebGLRenderingContext, program: WebGLProgram) {\n            this.Init.raise(this, new WebGLInitEventArgs(gl, program));\n        }\n\n        protected OnDraw(gl: WebGLRenderingContext, program: WebGLProgram, width: number, height: number) {\n            this.Draw.raise(this, new WebGL.WebGLDrawEventArgs(gl, program, width, height));\n        }\n    }\n    Fayde.CoreLibrary.add(WebGLCanvas);\n    Fayde.Markup.Content(WebGLCanvas, WebGLCanvas.SourceProperty);\n\n    module reactions {\n        UIReaction(WebGLCanvas.SourceProperty, (upd, ov, nv, wc: WebGLCanvas) => {\n            (<any>wc).OnSourceChanged(ov, nv);\n        }, false);\n    }\n}","module Fayde.WebGL {\n    export class WebGLDrawEventArgs implements nullstone.IEventArgs {\n        gl: WebGLRenderingContext;\n        program: WebGLProgram;\n        width: number;\n        height: number;\n\n        constructor(gl: WebGLRenderingContext, program: WebGLProgram, width: number, height: number) {\n            Object.defineProperties(this, {\n                \"gl\": {value: gl, writable: false},\n                \"program\": {value: program, writable: false},\n                \"width\": {value: width, writable: false},\n                \"height\": {value: height, writable: false}\n            });\n        }\n    }\n}","module Fayde.WebGL {\n    export class WebGLInitEventArgs implements nullstone.IEventArgs {\n        gl: WebGLRenderingContext;\n        program: WebGLProgram;\n\n        constructor(gl: WebGLRenderingContext, program: WebGLProgram) {\n            Object.defineProperties(this, {\n                \"gl\": {value: gl, writable: false},\n                \"program\": {value: program, writable: false}\n            });\n        }\n    }\n}","module Fayde.WebGL {\r\n    export interface IInitEvent {\r\n        (gl: WebGLRenderingContext, program: WebGLProgram);\r\n    }\r\n    export interface IDrawEvent {\r\n        (gl: WebGLRenderingContext, program: WebGLProgram, width: number, height: number);\r\n    }\r\n\r\n    export class WebGLSourceBase extends DependencyObject implements fayde.webgl.updater.IWebGLSource {\r\n        protected $gl: WebGLRenderingContext;\r\n        protected $program: WebGLProgram;\r\n        protected $loaded = false;\r\n        protected $onInit: IInitEvent;\r\n        private $onDraw: IDrawEvent;\r\n\r\n        constructor() {\r\n            super();\r\n            this.$setElement(document.createElement('canvas'));\r\n            this.$tryLoad();\r\n        }\r\n\r\n        private $setElement(element: HTMLCanvasElement) {\r\n            this.$gl = <WebGLRenderingContext>(element.getContext(\"webgl\") || element.getContext(\"experimental-webgl\"));\r\n            this.$tryLoad();\r\n        }\r\n\r\n        protected $tryLoad() {\r\n            if (!!this.$loaded)\r\n                return;\r\n            this.init(this.$gl, this.$program = this.$gl.createProgram());\r\n            this.$loaded = true;\r\n        }\r\n\r\n        resize(width: number, height: number) {\r\n            var canvas = this.$gl.canvas;\r\n            this.$gl.viewport(0, 0, width, height);\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n        }\r\n\r\n        init(gl: WebGLRenderingContext, program: WebGLProgram) {\r\n            this.$onInit && this.$onInit(gl, program);\r\n        }\r\n\r\n        draw(ctx: CanvasRenderingContext2D) {\r\n            if (!this.$loaded)\r\n                return;\r\n            //TODO: Optimize clipping of gl canvas inside perspective of\r\n            var canvas = this.$gl.canvas;\r\n            this.$onDraw && this.$onDraw(this.$gl, this.$program, canvas.width, canvas.height);\r\n            ctx.drawImage(canvas, 0, 0);\r\n        }\r\n\r\n        detach() {\r\n            this.$onInit = null;\r\n            this.$onDraw = null;\r\n        }\r\n\r\n        attach(onInit: IInitEvent, onDraw: IDrawEvent) {\r\n            this.$onInit = onInit;\r\n            this.$onDraw = onDraw;\r\n        }\r\n    }\r\n}","/// <reference path=\"WebGLSourceBase\" />\n\nmodule Fayde.WebGL {\n    export class WebGLSource extends WebGLSourceBase {\n        static VertexShaderProperty = DependencyProperty.Register(\"VertexShader\", () => VertexShader, WebGLSource, undefined, (d: WebGLSource, args) => d.OnVertexShaderChanged(args.OldValue, args.NewValue));\n        static FragmentShaderProperty = DependencyProperty.Register(\"FragmentShader\", () => FragmentShader, WebGLSource, undefined, (d: WebGLSource, args) => d.OnFragmentShaderChanged(args.OldValue, args.NewValue));\n        VertexShader: VertexShader;\n        FragmentShader: FragmentShader;\n\n        protected OnVertexShaderChanged(oldShader: VertexShader, newShader: VertexShader) {\n            if (newShader) {\n                newShader.load()\n                    .then(() => this.$tryLoad(),\n                        err => console.error(\"Could not load vertex shader.\", err));\n            }\n        }\n\n        protected OnFragmentShaderChanged(oldShader: FragmentShader, newShader: FragmentShader) {\n            if (newShader) {\n                newShader.load()\n                    .then(() => this.$tryLoad(),\n                        err => console.error(\"Could not load fragment shader.\", err));\n            }\n        }\n\n        protected $tryLoad() {\n            if (!!this.$loaded)\n                return;\n            var vs = this.VertexShader;\n            var fs = this.FragmentShader;\n            if (!vs || !fs || !vs.IsLoaded || !fs.IsLoaded)\n                return;\n            this.init(this.$gl, this.$program = this.$gl.createProgram());\n            this.$loaded = true;\n        }\n\n        init(gl: WebGLRenderingContext, program: WebGLProgram) {\n            var vs = this.VertexShader;\n            vs.compile(gl);\n            vs.use(gl, program);\n\n            var fs = this.FragmentShader;\n            fs.compile(gl);\n            fs.use(gl, program);\n\n            gl.linkProgram(program);\n            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n                console.warn(\"Could not link webgl program.\", gl.getProgramInfoLog(program));\n                return;\n            }\n            gl.useProgram(program);\n            this.$onInit && this.$onInit(this.$gl, this.$program);\n        }\n\n    }\n}","module Fayde.WebGL {\n    import ShapeArrangePipeDef = minerva.shapes.shape.arrange.ShapeArrangePipeDef;\n    enum LoadStatus {\n        NotLoaded = 0,\n        Loaded = 1,\n        LoadFailed = 2,\n        Loading = 3,\n    }\n\n    export class ShaderBase extends DependencyObject implements IShader {\n        static SourceProperty = DependencyProperty.Register(\"Source\", () => String, ShaderBase, undefined, (d: ShaderBase, args) => d.OnSourceChanged(args.OldValue, args.NewValue));\n        static UriProperty = DependencyProperty.Register(\"Uri\", () => Uri, ShaderBase, undefined, (d: ShaderBase, args) => d.OnUriChanged(args.OldValue, args.NewValue));\n        static IsLoadedProperty = DependencyProperty.Register(\"IsLoaded\", () => Boolean, ShaderBase, false);\n        Source: string;\n        Uri: Uri;\n        IsLoaded: boolean;\n\n        protected $shader: WebGLShader = null;\n        private $loadStatus = LoadStatus.NotLoaded;\n        private $loadErr = null;\n        private $compiled = false;\n\n        protected OnSourceChanged(oldSource: string, newSource: string) {\n            this.$compiled = false;\n            if (this.$loadStatus !== LoadStatus.Loading) {\n                this.SetCurrentValue(ShaderBase.UriProperty, undefined);\n            }\n            if (!newSource) {\n                this.$loadStatus = LoadStatus.NotLoaded;\n                this.SetCurrentValue(ShaderBase.IsLoadedProperty, false);\n            } else {\n                this.$loadStatus = LoadStatus.Loaded;\n                this.SetCurrentValue(ShaderBase.IsLoadedProperty, true);\n            }\n        }\n\n        protected OnUriChanged(oldUri: Uri, newUri: Uri) {\n            this.$compiled = false;\n            if (!newUri)\n                return;\n            this.SetCurrentValue(ShaderBase.SourceProperty, undefined);\n        }\n\n        load(forceLoad?: boolean): Promise<IShader> {\n            if (forceLoad === true)\n                this.SetCurrentValue(ShaderBase.SourceProperty, undefined);\n\n            if (this.$loadStatus === LoadStatus.Loaded)\n                return Promise.resolve(this);\n            if (this.$loadStatus === LoadStatus.LoadFailed)\n                return Promise.reject<IShader>(this.$loadErr);\n\n            var uri = this.Uri;\n            if (Uri.isNullOrEmpty(uri))\n                return Promise.reject<IShader>(\"Cannot load shader if no Uri is specified.\");\n\n            this.$loadStatus = LoadStatus.Loading;\n            this.$loadErr = null;\n            return new Promise<IShader>((resolve, reject) => {\n                (<any>require)(['text!' + this.Uri], (src) => {\n                    this.SetCurrentValue(ShaderBase.SourceProperty, src);\n                    resolve(this);\n                }, (err) => {\n                    this.$loadStatus = LoadStatus.LoadFailed;\n                    reject(this.$loadErr = err);\n                });\n            });\n        }\n\n        compile(gl: WebGLRenderingContext): boolean {\n            if (!!this.$compiled)\n                return true;\n            var src = this.Source;\n            if (!src)\n                return false;\n            var shader = this.$shader = gl.createShader(this.getType(gl));\n            gl.shaderSource(shader, src);\n            gl.compileShader(shader);\n            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n                console.error(\"An error occurred compiling the shaders.\", gl.getShaderInfoLog(shader));\n                throw new Error(\"An error occurred compiling the shaders.\");\n            }\n            this.$compiled = true;\n            return true;\n        }\n\n        use(gl: WebGLRenderingContext, program: WebGLProgram) {\n            gl.attachShader(program, this.$shader);\n        }\n\n        protected getType(gl: WebGLRenderingContext): number {\n            return -1;\n        }\n    }\n    Fayde.Markup.Content(ShaderBase, ShaderBase.SourceProperty);\n}","/// <reference path=\"ShaderBase\" />\n\nmodule Fayde.WebGL {\n    export class FragmentShader extends ShaderBase {\n        protected getType(gl: WebGLRenderingContext): number {\n            return gl.FRAGMENT_SHADER;\n        }\n    }\n}","/// <reference path=\"ShaderBase\" />\n\nmodule Fayde.WebGL {\n    export class VertexShader extends ShaderBase {\n        protected getType(gl: WebGLRenderingContext): number {\n            return gl.VERTEX_SHADER;\n        }\n    }\n}","/// <reference path=\"FragmentShader\" />\n/// <reference path=\"VertexShader\" />\n\nmodule Fayde.WebGL {\n    nullstone.registerTypeConverter(FragmentShader, (value: any): any => {\n        if (!value)\n            return value;\n        if (value instanceof FragmentShader)\n            return value;\n        var shader = new FragmentShader();\n        fillShader(shader, value);\n        return shader;\n    });\n    nullstone.registerTypeConverter(VertexShader, (value: any): any => {\n        if (!value)\n            return value;\n        if (value instanceof VertexShader)\n            return value;\n        var shader = new VertexShader();\n        fillShader(shader, value);\n        return shader;\n\n\n    });\n\n    function fillShader(shader: ShaderBase, value: any) {\n        if (value instanceof ShaderBase) {\n            shader.Source = value.Source;\n        } else if (value instanceof Uri) {\n            shader.Uri = value;\n        } else if (typeof value === \"string\") {\n            shader.Uri = new Uri(value);\n        }\n    }\n}","module fayde.webgl.updater {\n    export interface IWebGLUpdaterAssets extends minerva.core.IUpdaterAssets, measure.IInput, arrange.IInput, render.IInput {\n        source: IWebGLSource;\n    }\n\n    export class WebGLCanvasUpdater extends minerva.core.Updater {\n        assets: IWebGLUpdaterAssets;\n\n        init() {\n            this.setMeasurePipe(minerva.singleton(measure.WebGLCanvasMeasurePipeDef))\n                .setArrangePipe(minerva.singleton(arrange.WebGLCanvasArrangePipeDef))\n                .setProcessDownPipe(minerva.singleton(minerva.controls.canvas.processdown.CanvasProcessDownPipeDef))\n                .setProcessUpPipe(minerva.singleton(minerva.controls.canvas.processup.CanvasProcessUpPipeDef))\n                .setRenderPipe(minerva.singleton(render.WebGLCanvasRenderPipeDef));\n\n            var assets = this.assets;\n            assets.source = null;\n\n            super.init();\n        }\n\n        onSurfaceChanged(oldSurface: minerva.core.ISurface, newSurface: minerva.core.ISurface) {\n            if (oldSurface)\n                oldSurface.unhookPrerender(this);\n            if (newSurface)\n                newSurface.hookPrerender(this);\n        }\n\n        preRender() {\n            var assets = this.assets;\n            if (assets.source)\n                this.invalidate();\n        }\n\n        onSizeChanged(oldSize: Size, newSize: Size) {\n            super.onSizeChanged(oldSize, newSize);\n            var source = this.assets.source;\n            if (source)\n                source.resize(newSize.width, newSize.height);\n        }\n    }\n}","module fayde.webgl.updater.arrange {\n    export interface IInput extends minerva.core.arrange.IInput {\n    }\n    export interface IState extends minerva.core.arrange.IState {\n    }\n    export interface IOutput extends minerva.core.arrange.IOutput {\n    }\n    export class WebGLCanvasArrangePipeDef extends minerva.core.arrange.ArrangePipeDef {\n        constructor() {\n            super();\n            this.replaceTapin('doOverride', tapins.doOverride)\n                .replaceTapin('buildLayoutClip', tapins.buildLayoutClip);\n        }\n    }\n}","module fayde.webgl.updater.measure {\n    export interface IInput extends minerva.core.measure.IInput {\n    }\n    export interface IState extends minerva.core.measure.IState {\n    }\n    export interface IOutput extends minerva.core.measure.IOutput {\n    }\n\n    export class WebGLCanvasMeasurePipeDef extends minerva.core.measure.MeasurePipeDef {\n        constructor() {\n            super();\n            this.replaceTapin('doOverride', tapins.doOverride);\n        }\n    }\n}","module fayde.webgl.updater.render {\n    export interface IInput extends minerva.core.render.IInput {\n        source: IWebGLSource;\n    }\n\n    export class WebGLCanvasRenderPipeDef extends minerva.core.render.RenderPipeDef {\n        constructor() {\n            super();\n            this.replaceTapin('doRender', tapins.doRender);\n        }\n    }\n}","module fayde.webgl.updater.arrange.tapins {\n    export function buildLayoutClip (input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, finalRect: Rect): boolean {\n        var lc = output.layoutClip;\n        lc.x = lc.y = lc.width = lc.height = 0;\n        return true;\n    }\n}","module fayde.webgl.updater.arrange.tapins {\n    export function doOverride (input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, finalRect: Rect): boolean {\n        var cr = state.childRect;\n        Size.copyTo(state.finalSize, state.arrangedSize);\n        return true;\n    }\n}","module fayde.webgl.updater.measure.tapins {\n    export function doOverride(input: IInput, state: IState, output: IOutput, tree: minerva.core.IUpdaterTree, availableSize: Size): boolean {\n        var available = state.availableSize;\n        var desired = output.desiredSize;\n        desired.width = desired.height = 0;\n        return true;\n    }\n}","module fayde.webgl.updater.render.tapins {\n    export function doRender(input: IInput, state: minerva.core.render.IState, output: minerva.core.render.IOutput, ctx: minerva.core.render.RenderContext, region: Rect, tree: minerva.core.IUpdaterTree): boolean {\n        var source = input.source;\n        if (!source)\n            return true;\n\n        ctx.save();\n        minerva.core.helpers.renderLayoutClip(ctx, input, tree);\n        source.draw(ctx.raw);\n        ctx.restore();\n\n        return true;\n    }\n}"],"sourceRoot":"/source/"}